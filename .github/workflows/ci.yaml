---
name: CI
on: [push] # yamllint disable-line rule:truthy
jobs:
  ci:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4.0.0
      - name: Lint YAML
        uses: ibiqlik/action-yamllint@v3.1.1
        with:
          strict: true
      - name: Install Flux CLI
        uses: fluxcd/flux2/action@v2.1.1
      - name: Build Kustomize resources
        run: flux build kustomization flux-system --dry-run --kustomization-file flux/sync/sync.yaml --path . > gitops.yaml
      # TODO: consider 'helm template' or 'flux build helmrelease --dry-run' (https://github.com/fluxcd/flux2/issues/2808)
      - name: Lint Kubernetes manifests
        uses: docker://ghcr.io/yannh/kubeconform:v0.6.3
        with:
          entrypoint: /kubeconform
          args: >
            -strict
            -kubernetes-version ${{ env.KUBERNETES_VERSION }}
            -schema-location default
            -schema-location https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json
            -skip CustomResourceDefinition
            gitops.yaml
        env:
          KUBERNETES_VERSION: 1.28.1 # renovate github-releases:kubernetes/kubernetes:^v(?<version>.*)$
      - name: Docker cache
        uses: actions/cache@v3.3.3
        with:
          path: docker-cache
          key: docker-cache-${{ hashFiles('docker-cache/*/docker/registry/v2/blobs/**') }}
          restore-keys: docker-cache-
      - name: Create cluster
        run: |
          port=5000
          for registry in registry.docker.io registry.k8s.io gcr.io ghcr.io quay.io
          do
            dir=./docker-cache/${registry//./-}
            mkdir -p $dir
            docker run -d -v $dir:/var/lib/registry -e REGISTRY_PROXY_REMOTEURL=https://$registry -p $port:5000 registry:${{ env.REGISTRY_VERSION }}
            arg="$arg --registry-mirror $registry=http://172.17.0.1:$port"
            ((port=port+1))
          done
          curl -Lo talosctl --no-progress-meter https://github.com/siderolabs/talos/releases/download/${{ env.TALOS_VERSION }}/talosctl-$(uname -s | tr '[:upper:]' '[:lower:]')-$(dpkg --print-architecture)
          chmod +x talosctl
          ./talosctl cluster create \
            --workers 0 \
            --config-patch-control-plane '{cluster: {allowSchedulingOnControlPlanes: true}}' \
            $arg \
            --kubernetes-version "${{ env.KUBERNETES_VERSION }}"
        env:
          TALOS_VERSION: v1.5.2 # renovate github-releases:siderolabs/talos
          KUBERNETES_VERSION: v1.28.1 # renovate github-releases:kubernetes/kubernetes
          REGISTRY_VERSION: 2.8.2 # renovate github-releases:distribution/distribution:^v(?<version>.*)$
      - name: Configure GitOps
        run: |
          kubectl apply -k flux/install

          ref='commit: ${{ github.sha }}'
          kubectl create configmap flux-config -n flux-system --from-literal "ref=$ref"
          sed -i='' "s/\${ref=branch: main}/$ref/" flux/sync/sync.yaml
          kubectl apply -k flux/sync

          kubectl wait deployment -n flux-system --for condition=Available -l 'app.kubernetes.io/part-of=flux'
          flux reconcile kustomization flux-system --with-source --timeout 1m
      - name: Extract debug info
        if: failure()
        run: |
          flux get all -A
          flux events -A
          kubectl get all -A
